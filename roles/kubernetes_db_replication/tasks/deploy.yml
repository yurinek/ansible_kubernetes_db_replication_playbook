---
# its recommended to connect ansible to localhost which has kubectl installed which has remote access to k8s server 


- name: deploy | Install kubectl client on ansible controller
  become: true
  pacman: 
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - kubectl 
      - python-pip
  when: ansible_facts['os_family'] == 'Archlinux'
 
  
- name: deploy | Install kubectl client on ansible controller
  become: true
  apt: 
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - kubectl 
      - python-pip
  when: "ansible_facts['os_family'] == 'Ubuntu' or ansible_facts['os_family'] == 'Debian'"
 

- name: deploy | Install pip binaries on ansible controller
  pip: 
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - openshift 
      - pyyaml


- name: deploy | Create persitent volume from definition file on ansible controller machine
  k8s:
    state: present
    definition: "{{ lookup('file', k8s_db_replication_files_path ~ '/volume-pv-hostpath.yml') }}"
    namespace: "{{ k8s_namespace }}"


- name: deploy | Create persitent volume claim from definition file on ansible controller machine
  k8s:
    state: present
    definition: "{{ lookup('file', k8s_db_replication_files_path ~ '/master-volume-pvc-hostpath.yml') }}"
    namespace: "{{ k8s_namespace }}"
  when: k8s_object_to_update == 'deployment'


- name: deploy | Create configmap from definition file on ansible controller machine
  k8s:
    state: present
    definition: "{{ lookup('file', k8s_db_replication_files_path ~ '/configmap.yml') }}"
    namespace: "{{ k8s_namespace }}"


- name: deploy | Create secret from definition file on ansible controller machine
  k8s:
    state: present
    definition: "{{ lookup('file', k8s_db_replication_files_path ~ '/secret.yml') }}"
    namespace: "{{ k8s_namespace }}"


- name: deploy | Create service-node-port from definition file on ansible controller machine
  k8s:
    state: present
    definition: "{{ lookup('file', k8s_db_replication_files_path ~ '/master-service-node-port.yml') }}"
    namespace: "{{ k8s_namespace }}"


- name: deploy | Create service-cluster-ip from definition file on ansible controller machine
  k8s:
    state: present
    definition: "{{ lookup('file', k8s_db_replication_files_path ~ '/master-service-cluster-ip.yml') }}"
    namespace: "{{ k8s_namespace }}"


- name: deploy | Create deployment for master database from definition file on ansible controller machine
  k8s:
    state: present
    definition: "{{ lookup('file', k8s_db_replication_files_path ~ '/master-deployment.yml') }}"
    namespace: "{{ k8s_namespace }}"
  when: k8s_object_to_update == 'deployment'


- name: deploy | Create deployment for slave database from definition file on ansible controller machine
  k8s:
    state: present
    definition: "{{ lookup('file', k8s_db_replication_files_path ~ '/slave-deployment.yml') }}"
    namespace: "{{ k8s_namespace }}"
  when: k8s_object_to_update == 'deployment'


- name: deploy | Create statefulset for master database from definition file on ansible controller machine
  k8s:
    state: present
    definition: "{{ lookup('file', k8s_db_replication_files_path ~ '/master-statefulset.yml') }}"
    namespace: "{{ k8s_namespace }}"
  when: k8s_object_to_update == 'statefulset'


- name: deploy | Create statefulset for slave database from definition file on ansible controller machine
  k8s:
    state: present
    definition: "{{ lookup('file', k8s_db_replication_files_path ~ '/slave-statefulset.yml') }}"
    namespace: "{{ k8s_namespace }}"
  when: k8s_object_to_update == 'statefulset'


- name: deploy | Get a list of all service objects
  shell: kubectl get services
  register: service_list


- name: deploy | Get a list of all pods
  shell: kubectl get pods
  register: pod_list


- name: deploy | Show a list of all services
  debug:
    msg: "{{ service_list.stdout_lines }}"


- name: deploy | Show a list of all pods
  debug:
    msg: "{{ pod_list.stdout_lines }}"