---
# runs on Kubernetes master node


# if cluster already exists, we will not init new cluster
- name: k8s_master | Check cluster state
  become: false
  command: kubectl get node
  ignore_errors: yes
  register: cluster_state


- name: k8s_master | Initialize the Kubernetes cluster using kubeadm
  command: kubeadm init --apiserver-advertise-address="{{ ansible_default_ipv4.address }}" --apiserver-cert-extra-sans="{{ ansible_default_ipv4.address }}"  --pod-network-cidr="{{ k8s_network }}"
  run_once: true
  # run if cluster doesnt exist
  when: cluster_state.stderr != ""
  

- name: k8s_master | Setup kubeconfig for user
  command: "{{ item }}"
  with_items:
   - mkdir -p "/home/{{ k8s_os_user }}/.kube"
   - cp /etc/kubernetes/admin.conf "/home/{{ k8s_os_user }}/.kube/config"
   - chown "{{ k8s_os_user }}:{{ k8s_os_user }}" "/home/{{ k8s_os_user }}/.kube/config"
  # run if cluster doesnt exist
  when: cluster_state.stderr != ""


- name: k8s_master | Install flannel pod network
  become: false
  # following flannel version works on linux mint 19
  command: kubectl create -f https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml
  # run if cluster doesnt exist
  when: cluster_state.stderr != ""


- name: k8s_master | Copy template to Generate join command files
  become: false
  template:
    src: generate_files_to_join_nodes.sh.j2
    dest: /tmp/generate_files_to_join_nodes.sh
    mode: u=rwx
  

# here we check if all hosts from host_group appname_stage_worker are already joined to k8s master. if not now they will be joined
- name: k8s_master | Execute script to Generate join command files
  become: false
  shell: bash /tmp/generate_files_to_join_nodes.sh
  register: shell_output
  # ansible cant determine if a shell module changed something, so lets help here out for the better output
  changed_when: '"will do nothing" not in shell_output.stdout'


- name: k8s_master | Find join command files
  become: false
  find: 
    paths: "/tmp/nodes_to_join"
    recurse: no 
    patterns: "*.sh"
  register: files_to_copy


- name: k8s_master | Copy join command files to local
  become: false
  fetch: 
    src: "{{ item.path }}"
    dest: /tmp/nodes_to_join/
    flat: yes
  with_items: "{{ files_to_copy.files }}"


- name: k8s_master | Remove join command files from k8s master
  file: 
    path: "{{ item }}"
    state: absent
  with_fileglob:
    - "/tmp/nodes_to_join/*"

    
- set_fact:
    become: false
    files_to_copy_string: "{{ files_to_copy.files|map(attribute='path')|list|join('_') }}" 


- name: k8s_master | Copy join command files to workers
  become: false
  delegate_to: "{{ item }}"
  copy:
    src:  "/tmp/nodes_to_join/join_{{ item }}.sh"
    dest: "/tmp/join_{{ item }}.sh"
    mode: u=rwx
  # to keep tasks generic, lets work with variables instead of hardcoded host_groups
  with_items: "{{ k8s_worker_node_names }}"
  # in case some nodes are already joined and therefore there are no generated files for them we want to skip it
  when: "'/tmp/nodes_to_join/join_' ~ item ~ '.sh' in files_to_copy_string"


- name: k8s_master | Remove join command files from local
  #local_action: file path=/tmp/nodes_to_join state=absent
  local_action: file path="{{ item }}" state=absent
  with_fileglob:
    - "/tmp/nodes_to_join/*"


- name: k8s_master | Execute join command files on workers
  delegate_to: "{{ item }}"
  shell: |
        if [ -f "/tmp/join_{{ item }}.sh" ]; then
          bash "/tmp/join_{{ item }}.sh"
        else
          echo "{{ item }} seems already joined"
        fi 
  # to keep tasks generic, lets work with variables instead of hardcoded host_groups
  with_items: "{{ k8s_worker_node_names }}"
  register: shell_output
  # ansible cant determine if a shell module changed something, so lets help here out for the better output
  changed_when: '"seems already joined" not in shell_output.stdout'


- name: k8s_master | Remove join command files from workers
  delegate_to: "{{ item }}"
  file: 
    path: "/tmp/join_{{ item }}.sh"
    state: absent
  # to keep tasks generic, lets work with variables instead of hardcoded host_groups
  with_items: "{{ k8s_worker_node_names }}"


- name: k8s_master | Copy template to label worker nodes
  become: false
  template:
    src: label_worker_nodes.sh.j2
    dest: /tmp/label_worker_nodes.sh
    mode: u=rwx
  

# here we check if all hosts from host_group appname_stage_worker are already labeled. if not now they will be labeled
- name: k8s_master | Label worker nodes
  become: false
  shell: bash /tmp/label_worker_nodes.sh
  register: shell_output
  # ansible cant determine if a shell module changed something, so lets help here out for the better output
  changed_when: '"will do nothing" not in shell_output.stdout'


- name: k8s_master | create ~/.kube directory on ansible controller node
  delegate_to: localhost
  become: false
  file: 
    path: "/home/{{ k8s_os_user }}/.kube"
    state: directory


- name: k8s_master | copy ~/.kube/config to ansible controller node for kubectl client
  fetch: 
    src:  "/home/{{ k8s_os_user }}/.kube/config"
    dest: "/home/{{ k8s_os_user }}/.kube/config"
    flat: yes



